#!/bin/bash

set -e
set -x

#This is configures an odroid to be a node controller

#install all dependencies for node
#dpkg -i nc-wag-os/packages/debian/*.deb
cd nc-wag-os/packages/python/
#change to offline install
pip install -e pika-0.9.14
pip install pyserial
cd ../../../

#Sets the odroid's hostname to NodeController so GuestNodes can easily find it
echo NodeController > /etc/hostname 

#set waggle parameters
mkdir -p /etc/waggle/
host_name=$RANDOM #has to changed so that the requirement for node ID in the packet header is met
echo " " > /etc/waggle/queuename
echo "$host_name" > /etc/waggle/hostname # The node's waggle hostname
echo "$host_name, \n" > /etc/waggle/devices
echo "1,2,3,4, \n" >> /etc/waggle/devices
echo "$host_name:5, \n" >> /etc/waggle/devices
echo " " >> /etc/waggle/NCIP

#make directory to store data cache log files and stored messages
#make / as large as possible, all the cached data gets stored here. 
mkdir -p /var/dc
#store outoing messages here
mkdir -p /var/dc/outgoing_msgs
#store incoming messages here
#each external guest node that registers with the nodecontroller will have a separate folder
mkdir -p /var/dc/incoming_msgs

#make directory to store comms log files
mkdir -p /var/log/comms

# Get the IP for the server you want to connect to
read -p "Enter the IP address of the cloud server you want to use: " server_ip
echo $server_ip > /etc/waggle/server_ip

#set processes to start at boot

#move communications.sh into the init.d folder and update
#starts communication processes
#cd ./waggle/nodecontroller/nc-wag-os/waggled
export waggled_dir="./waggle/nodecontroller/nc-wag-os/waggled"

mv ${waggled_dir}/communications.sh /etc/init.d
#chmod +x /etc/init.d/communications.sh 
update-rc.d communications.sh defaults 

#move data_cache.sh into the init.d folder and update
#starts data cache process
mv ${waggled_dir}/data_cache.sh /etc/init.d
#chmod +x /etc/init.d/data_cache.sh 
update-rc.d data_cache.sh defaults 

#comment this out if nodecontroller and guestnode are separate machines
#move sensor.sh into the init.d folder and update
#starts sensor script
mv ${waggled_dir}/start_sensor.sh /etc/init.d
#chmod +x /etc/init.d/start_sensor.sh 
update-rc.d start_sensor.sh defaults 

#set up SysMon stuff
#starts WagMan script at boot
mv ${waggled_dir}/WagMan_start.sh /etc/init.d
#chmod +x /etc/init.d/WagMan_start.sh 
update-rc.d WagMan_start.sh defaults 

#starts set-up for heart beat script at boot
mv ${waggled_dir}/heartbeat_setup_start.sh /etc/init.d
#chmod +x /etc/init.d/heartbeat_setup_start.sh 
#update-rc.d heartbeat_setup_start.sh defaults 

#starts node controller heart beat at boot
mv ${waggled_dir}/heartbeat_start.sh /etc/init.d
#chmod +x /etc/init.d/heartbeat_start.sh 
#update-rc.d heartbeat_start.sh defaults 

#creates udev rule to attach SysMon to /dev/arduinoMicro
mv ${waggled_dir}/99-usb-serial.rules /etc/udev/rules.d

#find and set IP address if possible
cd ${waggled_dir}/
python NC_scanner.py

#cd ${waggled_dir}/WagMan
#chmod +x heartbeat_setup.sh
echo "Odroid is now going to reboot."
reboot

