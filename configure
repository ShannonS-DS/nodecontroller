#!/bin/bash

set -e
set -x
#set -v 
#This is configures an odroid to be a node controller
export waggled_dir="$(pwd)/nc-wag-os/waggled"


# Create symlink if repository is not already at the expected location
if [ `pwd` != "/usr/lib/waggle/nodecontroller" ] ; then
  mkdir -p /usr/lib/waggle/
  if [ -d /usr/lib/waggle/nodecontroller ] && [ ! -L /usr/lib/waggle/nodecontroller ] ; then 
    echo "Error: Directory /usr/lib/waggle/nodecontroller already exists."
    exit 1
  fi
  rm /usr/lib/waggle/nodecontroller
  ln -s `pwd` /usr/lib/waggle/nodecontroller
fi

#install pika package from the git repo.
cd nc-wag-os/packages/python/
#change to offline install
pip install -e pika-0.9.14
pip install pyserial
cd ../../../


#set waggle parameters
mkdir -p /etc/waggle/

if [ ${BEEHIVE_HOST}x == "x" ] ; then
  # Get the IP for the server you want to connect to
  read -p "Enter the URL or IP address of the beehive cloud server you want to use: " BEEHIVE_HOST
fi

if [ ${BEEHIVE_HOST}x == "x" ] ; then
  export BEEHIVE_HOST='127.0.0.1'
fi

#We have to move away from manual input, and take it as an argument, with the 
#default beehive server IP set to localhost. Also, we need a way to let the 
#user know that a wrong server was chosen.
echo "The beehive server is set to ${BEEHIVE_HOST}."
sleep 1
echo ${BEEHIVE_HOST} > /etc/waggle/server_ip


#has to be changed so that the requirement for node ID in the packet header is met
host_name=$RANDOM 
echo " " > /etc/waggle/queuename
echo "$host_name" > /etc/waggle/hostname # The node's waggle hostname
echo "$host_name, \n" > /etc/waggle/devices
echo "1,2,3,4, \n" >> /etc/waggle/devices
echo "$host_name:5, \n" >> /etc/waggle/devices
echo " " >> /etc/waggle/NCIP #Why is this empty? and we need to clean this portion of code up

#make directory to store data cache log files and stored messages
#make / as large as possible, all the cached data gets stored here. 
mkdir -p /var/dc
#store outoing messages here
mkdir -p /var/dc/outgoing_msgs
#store incoming messages here
#each external guest node that registers with the nodecontroller will have a separate folder
mkdir -p /var/dc/incoming_msgs

#make directory to store comms log files
mkdir -p /var/log/comms



#set processes to start at boot

#add communication processes to autostart
ln -sf  ${waggled_dir}/communications.sh /etc/init.d/
#chmod +x /etc/init.d/communications.sh 
update-rc.d communications.sh defaults 

#add data cache process to autostart
ln -sf  ${waggled_dir}/data_cache.sh /etc/init.d/
#chmod +x /etc/init.d/data_cache.sh 
update-rc.d data_cache.sh defaults 

#add core sensor script to autostart
ln -sf  ${waggled_dir}/start_sensor.sh /etc/init.d/
#chmod +x /etc/init.d/start_sensor.sh 
update-rc.d start_sensor.sh defaults 

#add WagMan script to autostart
ln -sf  ${waggled_dir}/WagMan_start.sh /etc/init.d/
#chmod +x /etc/init.d/WagMan_start.sh 
update-rc.d WagMan_start.sh defaults 

#add heart beat script to autostart
ln -sf  ${waggled_dir}/heartbeat_setup_start.sh /etc/init.d/
#chmod +x /etc/init.d/heartbeat_setup_start.sh 
#update-rc.d heartbeat_setup_start.sh defaults 

#add node controller heart beat to autostart
ln -sf  ${waggled_dir}/heartbeat_start.sh /etc/init.d/
#chmod +x /etc/init.d/heartbeat_start.sh 
#update-rc.d heartbeat_start.sh defaults 

#creates udev rule to attach Wagman to /dev/wagman
#cp ${waggled_dir}/99-usb-serial.rules /etc/udev/rules.d
ln -sf  ${waggled_dir}/99-usb-serial.rules /etc/udev/rules.d/

#cd ${waggled_dir}/WagMan
#chmod +x heartbeat_setup.sh

