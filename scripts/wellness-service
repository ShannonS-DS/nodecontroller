#!/usr/bin/python3

import datetime
import os
import pytz
from signal import *
import socket
import subprocess
import sys
import time
import zmq

# Every minute, check the following items:
# - Modem in lsusb
# - Modem in ifconfig
# - Modem has IP address
# - Beehive server is in DNS
# - Beehive server can be pinged
# - Local sshd is ok (test connect locally)
# Every half hour, check the following items:
# - Can ssh to beehive
# - Can ssh to NC from beehive
#
# If modem is not in lsusb,
#   1) power cycle the hub,
#   2) log failure.
# If modem not in ifconfig,
#   1) pkill -HUP pppd
#   2) log failure.
# If modem has no IP address,
#   1) pkill -HUP pppd
#   2) log failure.
# If beehive cannot be pinged
#   beehive server is in DNS

############################
##### Helper Functions #####
############################

# Run a command and capture it's output
def run_command(command):
  p = subprocess.Popen(command, stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)
  return iter(p.stdout.readline, b'')

# Get the Beehive server hostname
def get_beehive_hostname():
  server_host = ''
  try:
    with open('/etc/waggle/server_host', 'r') as f:
      server_host = f.readline().rstrip()
  except Exception:
    pass
  return server_host

def reset_deadman_trigger():
  file = "/usr/lib/waggle/waggle_image/alive"
  rc = os.system("touch " + file + " > /dev/null 2>&1")
  if rc != 0:
    return False
  
def log_message(message):
  os.system("logger -t wellness " + message)

def subscribe_wagman_status():
  context = zmq.Context()
  socket = context.socket(zmq.SUB)
  socket.setsockopt(zmq.RCVTIMEO, 3000)
  socket.setsockopt(zmq.SUBSCRIBE, b'')
  socket.connect ('ipc:///tmp/zeromq_wagman-pub')
  return socket

def unsubscribe_wagman_status(socket):
  socket.close()

###########################
##### Wellness Checks #####
###########################

# Check that there is a "Wireless" device connected to the USB hub
def check_USB_modem():
  output = run_command(['lsusb'])
  for line in output:
    if b"Wireless" in line:
      return True
  return False

# Check that there is an IP address listed in the PPP info of ifconfig
def check_network_interface():
  output = run_command(['ifconfig'])
  have_ppp = False
  have_ip = False
  for line in output:
    if b"Point-to-Point Protocol" in line:
      have_ppp = True
    if b"inet addr:" in line:
      have_ip = True
  return have_ppp and have_ip

# DNS lookup of the Beehive server hostname
def check_beehive_DNS(hostname):
  beehive_ip = ''
  try:
    beehive_ip = socket.gethostbyname(hostname)
  except Exception:
    return False

  return True

# Ping the Beehive server
# The ICMP port is disabled on the beehive servers for external IPs, so
# just check that the beehive web portal is up
def check_beehive_ping(hostname):
  rc = os.system("curl " + hostname + "/api/ > /dev/null 2>&1")
  if rc != 0:
    return False

  return True

# Connect to the local sshd
def check_local_sshd():
  # To test, add "waggle" user to ThinkPad and setup passwordless key
  command = ['ssh -i /usr/lib/waggle/SSL/node/key.pem -x',
             '-o "PasswordAuthentication no"',
             '-o "StrictHostKeyChecking no"',
             '-o "ConnectTimeout 1" waggle@localhost',
             'date > /dev/null 2>&1']
  #print(' '.join(command))
  rc = os.system(' '.join(command))
  if rc != 0:
    return False

  return True


# Connect to the Beehive server's sshd
def check_beehive_sshd(hostname):
  command = ['ssh -i /usr/lib/waggle/SSL/node/key.pem -x',
             '-o "PasswordAuthentication no"',
             '-o "StrictHostKeyChecking no"',
             'root@'+hostname, '-p 20022',
             'date > /dev/null 2>&1']
  #print(' '.join(command))
  rc = os.system(' '.join(command))
  if rc != 0:
    return False

  return True


# Check that we can read any WagMan status messages
def check_wagman_status(socket):
  message = ""
  try:
    while True:
      message = socket.recv_string()
  except zmq.ZMQError:
    pass

  if len(message) == 0:
    return False
  return True

#########################
##### Interventions #####
#########################

def reset_wagman():
  os.system("/usr/lib/waggle/waggle_image/scripts/reset_wagman.sh")

def update_wagman_date():
  nodecontroller_date = time.time()
  wagman_date = run_command(["wagman-client", "date"])
  year,month,day,hour,minute,second = wagman_time.split()
  
"""
import datetime
import pytz
import subprocess
import time

def run_command(command):
  p = subprocess.Popen(command, stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)
  return iter(p.stdout.readline, b'')


wagman_time = "2016 8 26 22 6 29"
year,month,day,hour,minute,second = wagman_time.split()
date = datetime.datetime(int(year), int(month), int(day),
                         int(hour), int(minute), int(second), 0,
                         pytz.UTC)
wagman_epoch_time = date.timestamp()
current_epoch_time = time.time()
if round(current_epoch_time) > round(wagman_epoch_time):
  print("Update WagMan.")
else:
  print("Don't Update WagMan.")
"""
"""
#!/bin/bash
set -x
set -e
my_date=$(date +%s)
current_wagman_date=$(wagman-client date)
current_wagman_epoch=$(date -d "$(echo $current_wagman_date | cut -d ' '  -f 1,2,3 | tr ' ' '-') $(echo $current_wagman_date | cut -d ' '  -f 4,5,6 | tr ' ' ':')" +%s)

if [ $my_date \> $current_wagman_epoch ];
then
    wagman-client date $(date +"%Y %m %d %H %M %S")
fi;
"""

# Human readable names for the tests in the same sequence that they are run
test_names = ['USB Modem', 'Network Interface', 'Beehive DNS', 'Beehive Ping',
              'Local sshd', 'Beehive sshd']

# base_sleep_time = 2  # s
beehive_hostname = get_beehive_hostname()

base_sleep_time = 60  # (seconds)
beehive_check_duration = 1800  # (seconds) 30 minutes
beehive_check_time = time.time() + beehive_check_duration  # check Beehive on start up
wagman_date_update_duration = 3600  # (seconds) 1 hour
wagman_date_update_time = time.time() + wagman_date_update_duration  # update WagMan date on start up
wagman_status = subscribe_wagman_status()
last_wagman_status_time = time.time()
max_wagman_silence_duration = 600  # (seconds) 10 minutes

""" ################################## """
""" Clean up when script is terminated """
""" ################################## """
def cleanup(signum, stack_frame):
  unsubscribe_wagman_status(wagman_status)
  quit()
for sig in (SIGINT, SIGQUIT, SIGTERM):
  signal(sig, cleanup)
""" ################################## """

while True:
  current_time = time.time()

  # Local checks (done every minute)
  local_check_results = [check_USB_modem(),
                         check_network_interface(),
                         check_local_sshd()]

  # Beehive checks
  beehive_check_results = []
  if (current_time - beehive_check_time) > beehive_check_duration:
    beehive_check_results = [check_beehive_DNS(beehive_hostname),
                             check_beehive_ping(beehive_hostname),
                             check_beehive_sshd(beehive_hostname),]
    if all(results2):
      beehive_check_time = time.time()

  # Reset deadman trigger if all local and Beehive checks have passed
  results = local_check_results + beehive_check_results
  if all(results):
    reset_deadman_trigger()
    log_message("Node Controller is well.")
  else:
    log_message("The following tests failed: " + 
                str([n for x,n in zip(results,test_names) if not x]) + "\n")

  # WagMan checks
  if check_wagman_status(wagman_status):
    # WagMan is still sending updates
    last_wagman_status_time = time.time()

    # Update the WagMan's date
    if (current_time - wagman_date_update_time) > wagman_date_update_duration:
      update_wagman_date()
  else:
    # WagMan stopped sending updates
    current_time = time.time()
    wagman_silence_duration = current_time - last_wagman_status_time
    if wagman_silence_duration >= max_wagman_silence_duration:
      log_message("WagMan is not well. Resetting WagMan...")
      reset_wagman()
      last_wagman_status_time = time.time()

  # 

  time.sleep(base_sleep_time)
